"""
TESTE DE VALIDA√á√ÉO - COLETOR DE DADOS BENIGNOS
Script para testar e validar o funcionamento do coletor ap√≥s corre√ß√µes
"""

import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio do projeto ao path
sys.path.append(str(Path(__file__).parent))

try:
    from benign_api_collector import BenignAPICollector
    print("‚úÖ Import do BenignAPICollector bem-sucedido")
except ImportError as e:
    print(f"‚ùå Erro no import: {e}")
    sys.exit(1)

def test_collector_initialization():
    """Testar inicializa√ß√£o do coletor"""
    print("\nüß™ Testando inicializa√ß√£o do coletor...")
    
    try:
        collector = BenignAPICollector(output_dir="test_output", verbose=True)
        print("‚úÖ Coletor inicializado com sucesso")
        return collector
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o: {e}")
        return None

def test_sysmon_connection(collector):
    """Testar conex√£o com Sysmon"""
    print("\nüîå Testando conex√£o com Sysmon...")
    
    try:
        # Tentar acessar eventos do Sysmon
        events = list(collector._get_sysmon_events())
        print(f"‚úÖ Conex√£o Sysmon OK - {len(events)} eventos obtidos")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Sysmon n√£o dispon√≠vel: {e}")
        print("üìù Isso √© normal se o Sysmon n√£o estiver instalado")
        return False

def test_alternative_monitoring(collector):
    """Testar monitoramento alternativo"""
    print("\nüîÑ Testando monitoramento alternativo (psutil)...")
    
    try:
        # Coletar algumas APIs por 5 segundos
        collector.collecting = True
        collector.start_time = None
        
        # Usar monitoramento alternativo por pouco tempo
        import time
        import threading
        
        def collect_for_time():
            collector._monitor_api_calls_alternative()
        
        # Iniciar coleta em thread separada
        thread = threading.Thread(target=collect_for_time, daemon=True)
        thread.start()
        
        time.sleep(3)  # Coletar por 3 segundos
        collector.collecting = False
        
        # Verificar se coletou dados
        total_apis = sum(len(apis) for apis in collector.process_api_calls.values())
        print(f"‚úÖ Monitoramento alternativo OK - {total_apis} APIs coletadas")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no monitoramento alternativo: {e}")
        return False

def test_csv_output(collector):
    """Testar sa√≠da CSV"""
    print("\nüìÑ Testando gera√ß√£o de CSV...")
    
    try:
        # Se h√° dados coletados, gerar CSV
        if collector.process_api_calls:
            output_file = collector._generate_output_filename()
            success = collector._save_to_csv(output_file)
            
            if success and Path(output_file).exists():
                file_size = Path(output_file).stat().st_size
                print(f"‚úÖ CSV gerado - {output_file} ({file_size} bytes)")
                return True
            else:
                print("‚ùå Arquivo CSV n√£o foi criado")
                return False
        else:
            # Se n√£o h√° dados, criar dados de teste para validar o m√©todo
            print("‚ö†Ô∏è N√£o h√° dados reais, criando dados de teste...")
            
            # Adicionar dados de teste
            collector.process_api_calls[9999] = ['test_api_1', 'test_api_2', 'test_api_3']
            collector.process_info[9999] = {'name': 'test_process.exe'}
            
            output_file = collector._generate_output_filename()
            success = collector._save_to_csv(output_file)
            
            if success and Path(output_file).exists():
                file_size = Path(output_file).stat().st_size
                print(f"‚úÖ CSV de teste gerado - {output_file} ({file_size} bytes)")
                
                # Limpar dados de teste
                del collector.process_api_calls[9999]
                del collector.process_info[9999]
                
                # Remover arquivo de teste
                Path(output_file).unlink()
                print("üßπ Dados de teste removidos")
                return True
            else:
                print("‚ùå Falha na gera√ß√£o de CSV de teste")
                return False
            
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o de CSV: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ TESTE DE VALIDA√á√ÉO - COLETOR DE DADOS BENIGNOS")
    print("=" * 60)
    
    # Teste 1: Inicializa√ß√£o
    collector = test_collector_initialization()
    if not collector:
        print("\n‚ùå Teste falhou na inicializa√ß√£o")
        return False
    
    # Teste 2: Conex√£o Sysmon
    sysmon_ok = test_sysmon_connection(collector)
    
    # Teste 3: Monitoramento alternativo
    alt_monitoring_ok = test_alternative_monitoring(collector)
    
    # Teste 4: Sa√≠da CSV
    csv_ok = test_csv_output(collector)
    
    # Resultado final
    print("\n" + "=" * 60)
    print("üìä RESULTADO DOS TESTES:")
    print(f"‚úÖ Inicializa√ß√£o: OK")
    print(f"{'‚úÖ' if sysmon_ok else '‚ö†Ô∏è'} Sysmon: {'OK' if sysmon_ok else 'N√£o dispon√≠vel (normal)'}")
    print(f"{'‚úÖ' if alt_monitoring_ok else '‚ùå'} Monitoramento alternativo: {'OK' if alt_monitoring_ok else 'FALHA'}")
    print(f"{'‚úÖ' if csv_ok else '‚ùå'} Gera√ß√£o CSV: {'OK' if csv_ok else 'FALHA'}")
    
    if alt_monitoring_ok and csv_ok:
        print("\nüéâ SISTEMA FUNCIONAL - Pronto para coleta de dados!")
        print("üí° Mesmo sem Sysmon, o modo alternativo funcionar√°")
        return True
    else:
        print("\n‚ùå SISTEMA COM PROBLEMAS - Verifique as depend√™ncias")
        return False

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado no teste: {e}")
        sys.exit(1)