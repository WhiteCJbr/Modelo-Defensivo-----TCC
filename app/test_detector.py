"""
SCRIPT DE TESTE PARA DETECTOR DE MALWARE POLIM√ìRFICO
Testa funcionalidades b√°sicas e logging do sistema
"""

import sys
import time
import json
from pathlib import Path
from datetime import datetime

def test_model_loading():
    """Testar carregamento do modelo"""
    print("üß™ Testando carregamento do modelo...")
    
    model_path = Path("../Tentativa2/optimized_malware_detector.joblib")
    
    if not model_path.exists():
        print(f"‚ùå Modelo n√£o encontrado: {model_path}")
        return False
    
    try:
        import joblib
        model_data = joblib.load(model_path)
        
        required_components = ['model', 'tfidf_vectorizer', 'feature_selector', 'pca']
        missing_components = []
        
        for component in required_components:
            if component not in model_data:
                missing_components.append(component)
        
        if missing_components:
            print(f"‚ö†Ô∏è Componentes faltando no modelo: {missing_components}")
        else:
            print("‚úÖ Modelo carregado com sucesso")
            print(f"   - Tipo do modelo: {type(model_data['model']).__name__}")
            print(f"   - TF-IDF Vectorizer: {'‚úì' if 'tfidf_vectorizer' in model_data else '‚úó'}")
            print(f"   - Feature Selector: {'‚úì' if 'feature_selector' in model_data else '‚úó'}")
            print(f"   - PCA: {'‚úì' if 'pca' in model_data else '‚úó'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar modelo: {e}")
        return False

def test_configuration():
    """Testar carregamento de configura√ß√£o"""
    print("\nüß™ Testando configura√ß√£o...")
    
    config_path = Path("config_polymorphic.json")
    
    if not config_path.exists():
        print(f"‚ö†Ô∏è Arquivo de configura√ß√£o n√£o encontrado: {config_path}")
        return False
    
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        print("‚úÖ Configura√ß√£o carregada com sucesso")
        print(f"   - Threshold: {config.get('detection_threshold', 'N/A')}")
        print(f"   - An√°lise a cada: {config.get('analysis_interval', 'N/A')} segundos")
        print(f"   - Eventos monitorados: {len(config.get('sysmon_events', []))}")
        print(f"   - Palavras-chave IA: {len(config.get('polymorphic_detection', {}).get('ai_keywords', []))}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√£o: {e}")
        return False

def test_sysmon_connection():
    """Testar conex√£o com Sysmon"""
    print("\nüß™ Testando conex√£o com Sysmon...")
    
    try:
        import win32evtlog
        
        # Tentar abrir log do Sysmon
        hand = win32evtlog.OpenEventLog(None, "Microsoft-Windows-Sysmon/Operational")
        win32evtlog.CloseEventLog(hand)
        
        print("‚úÖ Sysmon detectado e acess√≠vel")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar com Sysmon: {e}")
        print("   üí° Verifique se o Sysmon est√° instalado e executando")
        print("   üí° Execute como Administrador")
        return False

def test_permissions():
    """Testar permiss√µes administrativas"""
    print("\nüß™ Testando permiss√µes...")
    
    try:
        import ctypes
        
        if ctypes.windll.shell32.IsUserAnAdmin():
            print("‚úÖ Executando como Administrador")
            return True
        else:
            print("‚ö†Ô∏è N√ÉO est√° executando como Administrador")
            print("   üí° Algumas funcionalidades podem n√£o funcionar")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar permiss√µes: {e}")
        return False

def test_dependencies():
    """Testar depend√™ncias"""
    print("\nüß™ Testando depend√™ncias...")
    
    required_modules = [
        'joblib', 'psutil', 'win32evtlog', 'win32con', 
        'win32event', 'win32api', 'logging', 'threading',
        'json', 'time', 'datetime', 'collections', 'pathlib'
    ]
    
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
            print(f"   ‚úÖ {module}")
        except ImportError:
            print(f"   ‚ùå {module}")
            missing_modules.append(module)
    
    if missing_modules:
        print(f"\n‚ùå M√≥dulos faltando: {missing_modules}")
        print("   üí° Instale as depend√™ncias faltando")
        return False
    else:
        print("\n‚úÖ Todas as depend√™ncias est√£o dispon√≠veis")
        return True

def test_log_directories():
    """Testar cria√ß√£o de diret√≥rios de log"""
    print("\nüß™ Testando diret√≥rios de log...")
    
    try:
        log_dir = Path("logs")
        evidence_dir = Path("evidence")
        
        log_dir.mkdir(exist_ok=True)
        evidence_dir.mkdir(exist_ok=True)
        
        # Testar escrita
        test_file = log_dir / "test.log"
        with open(test_file, 'w') as f:
            f.write(f"Teste de log - {datetime.now()}")
        
        test_file.unlink()  # Remover arquivo de teste
        
        print("‚úÖ Diret√≥rios de log criados e acess√≠veis")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar diret√≥rios: {e}")
        return False

def run_basic_functionality_test():
    """Teste b√°sico de funcionalidade do detector"""
    print("\nüß™ Testando funcionalidade b√°sica do detector...")
    
    try:
        # Importar e inicializar o detector
        sys.path.append('.')
        from detection_sistem import SysmonMalwareDetector
        
        model_path = "../Tentativa2/optimized_malware_detector.joblib"
        config_path = "config_polymorphic.json"
        
        print("   Inicializando detector...")
        detector = SysmonMalwareDetector(model_path, config_path)
        
        print("   Testando processamento de API calls...")
        # Testar processamento b√°sico
        test_api_calls = ['CreateProcess', 'connect:suspicious.com:443', 'LoadLibrary:kernel32.dll']
        
        result = detector._predict(test_api_calls, "TEST_PID")
        
        if result:
            print(f"   ‚úÖ Predi√ß√£o funcionando: {result['prediction']} (confian√ßa: {result['confidence']:.3f})")
        else:
            print("   ‚ö†Ô∏è Predi√ß√£o retornou None")
        
        print("‚úÖ Teste b√°sico de funcionalidade conclu√≠do")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de funcionalidade: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Executar todos os testes"""
    print("üîç TESTE DO DETECTOR DE MALWARE POLIM√ìRFICO")
    print("=" * 60)
    print(f"Data/Hora: {datetime.now()}")
    print("=" * 60)
    
    tests = [
        ("Depend√™ncias", test_dependencies),
        ("Permiss√µes", test_permissions),
        ("Carregamento do Modelo", test_model_loading),
        ("Configura√ß√£o", test_configuration),
        ("Conex√£o Sysmon", test_sysmon_connection),
        ("Diret√≥rios de Log", test_log_directories),
        ("Funcionalidade B√°sica", run_basic_functionality_test)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        results[test_name] = test_func()
        time.sleep(0.5)  # Pequena pausa entre testes
    
    # Resumo dos resultados
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:.<30} {status}")
    
    print("-" * 60)
    print(f"Total: {passed}/{total} testes passaram")
    
    if passed == total:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("O detector est√° pronto para uso.")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} teste(s) falharam")
        print("Corrija os problemas antes de usar o detector.")
    
    print("\nüí° Para executar o detector:")
    print("python detection_sistem.py --model ../Tentativa2/optimized_malware_detector.joblib --config config_polymorphic.json --debug")

if __name__ == "__main__":
    main()